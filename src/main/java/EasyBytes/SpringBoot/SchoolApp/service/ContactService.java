package EasyBytes.SpringBoot.SchoolApp.service;import EasyBytes.SpringBoot.SchoolApp.config.EazySchoolProps;import EasyBytes.SpringBoot.SchoolApp.constants.contactStatusConstants;import EasyBytes.SpringBoot.SchoolApp.model.Contact;import EasyBytes.SpringBoot.SchoolApp.repository.ContactRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.web.context.annotation.ApplicationScope;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;@Slf4j@Service//@RequestScope//@SessionScope@ApplicationScopepublic class ContactService {    //this is service layer    @Autowiredprivate ContactRepository contactRepository;    @Autowired    EazySchoolProps eazySchoolProps;    public boolean saveMessagedetails(Contact contact){       boolean isSaved = false;       //logic for JDBC template       contact.setStatus(contactStatusConstants.OPEN);       Contact savedContact = contactRepository.save(contact);       if(savedContact != null && savedContact.getContactId() > 0){           isSaved = true;       }        return isSaved;   }    public List<Contact> findMsgsWithOpenStatus() {        List<Contact> contactMsgs = contactRepository.findByStatus(contactStatusConstants.OPEN);        return contactMsgs;    }    public boolean updateMsgStatus(int contactId) {        boolean isUpdated = false;//        //first get the details by contactId//        Optional<Contact> contact = contactRepository.findById(contactId);//        contact.ifPresent(contact1 -> {//            contact1.setStatus(contactStatusConstants.CLOSE);//        });//no need as we use @Query to update object directly        ///int rows = contactRepository.updateStatusById(contactStatusConstants.CLOSE,contactId);        int rows = contactRepository.updateMsgStatus(contactStatusConstants.CLOSE,contactId);        if(rows > 0){            isUpdated = true;        }        return isUpdated;    }    public Page<Contact> findMsgsWithOpenStatus(int pageNum, String sortField, String sortDir) {//        int pageSize = 5;//changing this as w are adding it with @Configuration properties        int pageSize = eazySchoolProps.getPageSize();        if(null != eazySchoolProps.getContact() && null != eazySchoolProps.getContact().get("pageSize")){            pageSize = Integer.parseInt(eazySchoolProps.getContact().get("pageSize").trim());        }//old logic        Pageable pageable = PageRequest.of(pageNum -1 ,pageSize , sortDir.equals("asc") ? Sort.by(sortField).ascending() : Sort.by(sortField).descending());        Page<Contact> msgPage = contactRepository.findByStatuswithQuery(contactStatusConstants.OPEN,pageable);        return msgPage;    }}